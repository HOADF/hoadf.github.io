// === script.js ===
document.addEventListener("DOMContentLoaded", async () => {
  const container = document.getElementById("portfolio");
  const yearEl = document.getElementById("year");
  if (yearEl) yearEl.textContent = new Date().getFullYear();

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const response = await fetch("projects.json");
    const projects = await response.json();

    projects.forEach(proj => {
      const section = document.createElement("section");
      section.className = "project";

      // === –§–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ ===
      if (proj.background) {
        // –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
        if (proj.background.startsWith("http") || proj.background.startsWith("images/")) {
          section.style.backgroundImage = `url(${proj.background})`;
          section.style.backgroundSize = "cover";
          section.style.backgroundPosition = "center";
        } else {
          // –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ü–≤–µ—Ç
          section.style.background = proj.background;
        }
      } else if (proj.colors && proj.colors.length > 1) {
        section.style.background = `linear-gradient(135deg, ${proj.colors[0]}, ${proj.colors[1]})`;
      }

      // === –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ ===
      section.innerHTML = `
        <img src="${proj.preview}" alt="${proj.title} –ø—Ä–µ–≤—å—é" loading="lazy">
        <h2>${proj.title}</h2>
        <p>${proj.description}</p>
        <div class="buttons">
          <a href="${proj.demo}" target="_blank" style="background-color:${proj.colors ? proj.colors[0] : '#3498db'};">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ</a>
          <a href="${proj.code}" target="_blank" style="background-color:${proj.colors ? proj.colors[0] : '#3498db'};">–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>
        </div>
      `;

      container.appendChild(section);
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ projects.json:", err);
  }

  // === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º ===
  const themes = ["light", "dark", "creamy"];
  let currentThemeIndex = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É
  const savedTheme = localStorage.getItem("theme") || "light";
  document.body.classList.add(savedTheme);
  currentThemeIndex = themes.indexOf(savedTheme);

  // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  const toggle = document.getElementById("theme-toggle");
  if (toggle) {
    // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    toggle.textContent =
      savedTheme === "light" ? "üå§ –°–≤–µ—Ç–ª–∞—è" :
      savedTheme === "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "üïØ –ö—Ä–µ–º–æ–≤–∞—è";

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    toggle.addEventListener("click", () => {
      document.body.classList.remove(...themes);
      currentThemeIndex = (currentThemeIndex + 1) % themes.length;
      const newTheme = themes[currentThemeIndex];
      document.body.classList.add(newTheme);
      localStorage.setItem("theme", newTheme);

      toggle.textContent =
        newTheme === "light" ? "üå§ –°–≤–µ—Ç–ª–∞—è" :
        newTheme === "dark" ? "üåô –¢—ë–º–Ω–∞—è" : "üïØ –ö—Ä–µ–º–æ–≤–∞—è";

      console.log("–¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:", newTheme);
     });  
   }
 }); 
